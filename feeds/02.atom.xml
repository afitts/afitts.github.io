<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Alex Fitts - 02</title><link href="http://afitts.github.io/" rel="alternate"></link><link href="http://afitts.github.io/feeds/02.atom.xml" rel="self"></link><id>http://afitts.github.io/</id><updated>2018-02-12T00:00:00-06:00</updated><entry><title>DB5 Stanford SQL Course Exercises (Part 2)</title><link href="http://afitts.github.io/2018/02/12/stanford-sql2/" rel="alternate"></link><published>2018-02-12T00:00:00-06:00</published><updated>2018-02-12T00:00:00-06:00</updated><author><name>Alex Fitts</name></author><id>tag:afitts.github.io,2018-02-12:/2018/02/12/stanford-sql2/</id><summary type="html">&lt;p&gt;The entirety of these exercises will be in SQLite.&lt;/p&gt;
&lt;h2&gt;SQL Social-Network Query Exercises (in SQLite)&lt;/h2&gt;
&lt;p&gt;Q1&lt;br&gt;
Find the names of all students who are friends with someone named Gabriel. &lt;/p&gt;
&lt;p&gt;A1&lt;br&gt;
select name&lt;br&gt;
from Highschooler&lt;br&gt;
where ID in (select ID1 from Friend&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;where ID2 in (select ID from Highschooler where name …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The entirety of these exercises will be in SQLite.&lt;/p&gt;
&lt;h2&gt;SQL Social-Network Query Exercises (in SQLite)&lt;/h2&gt;
&lt;p&gt;Q1&lt;br&gt;
Find the names of all students who are friends with someone named Gabriel. &lt;/p&gt;
&lt;p&gt;A1&lt;br&gt;
select name&lt;br&gt;
from Highschooler&lt;br&gt;
where ID in (select ID1 from Friend&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;where ID2 in (select ID from Highschooler where name = 'Gabriel'))&lt;/p&gt;
&lt;p&gt;Q2&lt;br&gt;
For every student who likes someone 2 or more grades younger than themselves, return that student's name and grade, and the name and grade of the student they like. &lt;/p&gt;
&lt;p&gt;A2&lt;br&gt;
select h1.name, h1.grade, h2.name, h2.grade&lt;br&gt;
from Highschooler as h1, Highschooler as h2, Likes&lt;br&gt;
where h1.ID = Likes.ID1 and h2.ID = Likes.ID2 and h1.grade = h2.grade+2  &lt;/p&gt;
&lt;p&gt;Q3&lt;br&gt;
For every pair of students who both like each other, return the name and grade of both students. Include each pair only once, with the two names in alphabetical order. &lt;/p&gt;
&lt;p&gt;A3&lt;br&gt;
select h1.name, h1.grade, h2.name, h2.grade&lt;br&gt;
from Highschooler as h1, Highschooler as h2, Highschooler as h3, Highschooler as h4, Likes as l1, Likes as l2&lt;br&gt;
where h1.ID = l1.ID1 and h2.ID = l1.ID2 and h3.ID = h2.ID and h4.ID = h1.ID &lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;and h2.ID = l2.ID1 and h1.ID = l2.ID2 and h1.name &amp;lt; h2.name&lt;/p&gt;
&lt;p&gt;Better solution:&lt;br&gt;
select h1.name, h1.grade, h2.name, h2.grade&lt;br&gt;
from Highschooler as h1, Highschooler as h2, Likes as l1, Likes as l2&lt;br&gt;
where h1.ID = l1.ID1 and h2.ID = l1.ID2 and h2.ID = l2.ID1&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;and h1.ID = l2.ID2 and h1.name &amp;lt; h2.name&lt;/p&gt;
&lt;p&gt;Q4&lt;br&gt;
Find all students who do not appear in the Likes table (as a student who likes or is liked) and return their names and grades. Sort by grade, then by name within each grade. &lt;/p&gt;
&lt;p&gt;A4&lt;br&gt;
select name, grade&lt;br&gt;
from Highschooler&lt;br&gt;
where ID not in (select ID1 from Likes) and ID not in (select ID2 from Likes)&lt;br&gt;
order by grade,name&lt;/p&gt;
&lt;p&gt;Q5&lt;br&gt;
For every situation where student A likes student B, but we have no information about whom B likes (that is, B does not appear as an ID1 in the Likes table), return A and B's names and grades. &lt;/p&gt;
&lt;p&gt;A5&lt;br&gt;
select h1.name, h1.grade, h2.name, h2.grade&lt;br&gt;
from Highschooler as h1, Highschooler as h2, Likes as l1&lt;br&gt;
where h1.ID = l1.ID1 and h2.ID = l1.ID2 and h2.ID not in (select ID1 from Likes)&lt;/p&gt;
&lt;p&gt;Q6&lt;br&gt;
Find names and grades of students who only have friends in the same grade. Return the result sorted by grade, then by name within each grade. &lt;/p&gt;
&lt;p&gt;A6&lt;br&gt;
select name,grade&lt;br&gt;
from Highschooler&lt;br&gt;
where ID not in (select h1.ID from Highschooler as h1,Highschooler as h2,Friend as f1&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;where h1.ID = f1.ID1 and h2.ID = f1.ID2 and h1.grade &amp;lt;&amp;gt; h2.grade)&lt;br&gt;
order by grade, name&lt;/p&gt;
&lt;p&gt;Q7&lt;br&gt;
For each student A who likes a student B where the two are not friends, find if they have a friend C in common (who can introduce them!). For all such trios, return the name and grade of A, B, and C. &lt;/p&gt;
&lt;p&gt;A7&lt;br&gt;
select distinct h1.name, h1.grade, h2.name, h2.grade, h3.name, h3.grade&lt;br&gt;
from Highschooler as h1, Highschooler as h2, Highschooler as h3, Likes as l1, Friend as f1&lt;br&gt;
where h1.ID = l1.ID1 and h2.ID = l1.ID2 and&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;h2.ID not in (select ID2 from Friend where h1.ID = ID1)&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;and h3.ID in (select ID2 from Friend where h1.ID = ID1)&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;and h3.ID in (select ID2 from Friend where h2.ID = ID1)&lt;/p&gt;
&lt;p&gt;Q8&lt;br&gt;
Find the difference between the number of students in the school and the number of different first names.&lt;/p&gt;
&lt;p&gt;A8&lt;br&gt;
select count(ID)-count(distinct name)&lt;br&gt;
from Highschooler&lt;/p&gt;
&lt;p&gt;Q9&lt;br&gt;
Find the name and grade of all students who are liked by more than one other student.&lt;/p&gt;
&lt;p&gt;A9&lt;br&gt;
select name, grade&lt;br&gt;
from Highschooler&lt;br&gt;
where ID in (select ID2 from Likes group by ID2 having count(distinct ID1)&amp;gt;1)&lt;/p&gt;
&lt;h2&gt;SQL Social-Network Query Exercises Extras (in SQLite)&lt;/h2&gt;
&lt;p&gt;Q1&lt;br&gt;
For every situation where student A likes student B, but student B likes a different student C, return the names and grades of A, B, and C.&lt;/p&gt;
&lt;p&gt;A1&lt;br&gt;
select distinct h1.name, h1.grade, h2.name, h2.grade, h3.name, h3.grade&lt;br&gt;
from Highschooler as h1, Highschooler as h2, Highschooler as h3, Likes as l1, Likes as l2&lt;br&gt;
where h1.ID = l1.ID1 and h2.ID = l1.ID2 and h2.ID = l2.ID1 and h3.ID = l2.ID2&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;and h1.ID &amp;lt;&amp;gt; l2.ID2&lt;/p&gt;
&lt;p&gt;Q2&lt;br&gt;
Find those students for whom all of their friends are in different grades from themselves. Return the students' names and grades. &lt;/p&gt;
&lt;p&gt;A2&lt;br&gt;
select name,grade&lt;br&gt;
from Highschooler&lt;br&gt;
where ID not in (select h1.ID from Highschooler as h1,Highschooler as h2,Friend as f1 &lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;where h1.ID = f1.ID1 and h2.ID = f1.ID2 and h1.grade = h2.grade)&lt;/p&gt;
&lt;p&gt;Q3&lt;br&gt;
What is the average number of friends per student? (Your result should be just one number.)&lt;/p&gt;
&lt;p&gt;A3&lt;br&gt;
select avg(f)&lt;br&gt;
from (select count(ID2) as f from Friend group by ID1)&lt;/p&gt;
&lt;p&gt;Q4&lt;br&gt;
Find the number of students who are either friends with Cassandra or are friends of friends of Cassandra. Do not count Cassandra, even though technically she is a friend of a friend. &lt;/p&gt;
&lt;p&gt;A4&lt;br&gt;
select count(distinct f1.ID1)&lt;br&gt;
from Friend as f1, Friend as f2, (select ID from Highschooler where name = 'Cassandra') as C&lt;br&gt;
where f1.ID2 = C.ID or (f1.ID1 &amp;lt;&amp;gt; C.ID and f1.ID2 = f2.ID1 and f2.ID2 = C.ID)&lt;/p&gt;
&lt;p&gt;Q5&lt;br&gt;
Find the name and grade of the student(s) with the greatest number of friends. &lt;/p&gt;
&lt;p&gt;A5&lt;br&gt;
select name, grade&lt;br&gt;
from Highschooler join (select ID1, count(ID2)as numF from Friend group by ID1) as f1 &lt;br&gt;
on ID = f1.ID1&lt;br&gt;
where f1.numF = (select max(f2.numF)&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;from (select count(ID2) as numF from Friend group by ID1) as f2)&lt;/p&gt;
&lt;p&gt;or (from solution set. Interesting and nice using of select, from, on, group by and having but contingent on name + grade being a unique key) &lt;/p&gt;
&lt;p&gt;select name, grade&lt;br&gt;
from Highschooler join Friend&lt;br&gt;
on ID = ID1&lt;br&gt;
group by name, grade&lt;br&gt;
having count(ID2) =  (select max(f.numF) &lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;from (select count(ID2) as numF from Friend group by ID1) as f)&lt;/p&gt;
&lt;h2&gt;SQL Social-Network Modification Exercises (in SQLite)&lt;/h2&gt;
&lt;p&gt;Q1&lt;br&gt;
It's time for the seniors to graduate. Remove all 12th graders from Highschooler. &lt;/p&gt;
&lt;p&gt;A1&lt;br&gt;
delete from Highschooler&lt;br&gt;
where grade = 12&lt;/p&gt;
&lt;p&gt;Q2&lt;br&gt;
If two students A and B are friends, and A likes B but not vice-versa, remove the Likes tuple.&lt;/p&gt;
&lt;p&gt;A2&lt;br&gt;
delete from Likes&lt;br&gt;
where ID1 in (select l1.ID1&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;from Likes as l1, Friend as f&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;where l1.ID1 = f.ID1 and l1.ID2 = f.ID2&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;and l1.ID2 not in (select ID1 from Likes as l2 where l2.ID2 = l1.ID1))&lt;/p&gt;
&lt;p&gt;Q3&lt;br&gt;
For all cases where A is friends with B, and B is friends with C, add a new friendship for the pair A and C. Do not add duplicate friendships, friendships that already exist, or friendships with oneself. (This one is a bit challenging; congratulations if you get it right.) &lt;/p&gt;
&lt;p&gt;A3&lt;/p&gt;</content></entry><entry><title>DB5 Stanford SQL Course Exercises (Part 1)</title><link href="http://afitts.github.io/2018/02/05/stanford-sql1/" rel="alternate"></link><published>2018-02-05T00:00:00-06:00</published><updated>2018-02-05T00:00:00-06:00</updated><author><name>Alex Fitts</name></author><id>tag:afitts.github.io,2018-02-05:/2018/02/05/stanford-sql1/</id><summary type="html">&lt;p&gt;The entirety of these exercises will be in SQLite.&lt;/p&gt;
&lt;h2&gt;SQL Movie-Rating Query Exercises&lt;/h2&gt;
&lt;p&gt;Q1&lt;br&gt;
Find the titles of all movies directed by Steven Spielberg.&lt;/p&gt;
&lt;p&gt;A1&lt;br&gt;
select title&lt;br&gt;
from Movie&lt;br&gt;
where director = 'Steven Spielberg';  &lt;/p&gt;
&lt;p&gt;Q2&lt;br&gt;
Find all years that have a movie that received a rating of 4 or 5, and …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The entirety of these exercises will be in SQLite.&lt;/p&gt;
&lt;h2&gt;SQL Movie-Rating Query Exercises&lt;/h2&gt;
&lt;p&gt;Q1&lt;br&gt;
Find the titles of all movies directed by Steven Spielberg.&lt;/p&gt;
&lt;p&gt;A1&lt;br&gt;
select title&lt;br&gt;
from Movie&lt;br&gt;
where director = 'Steven Spielberg';  &lt;/p&gt;
&lt;p&gt;Q2&lt;br&gt;
Find all years that have a movie that received a rating of 4 or 5, and sort them in increasing order. &lt;/p&gt;
&lt;p&gt;A2&lt;br&gt;
select year&lt;br&gt;
from Movie&lt;br&gt;
where mID in (select distinct mID from Rating where stars  &amp;gt;= 4)&lt;br&gt;
order by year;  &lt;/p&gt;
&lt;p&gt;Q3&lt;br&gt;
Find the titles of all movies that have no ratings. &lt;/p&gt;
&lt;p&gt;A3&lt;br&gt;
select title&lt;br&gt;
from Movie&lt;br&gt;
where mID not in (select mID from Rating);  &lt;/p&gt;
&lt;p&gt;Q4&lt;br&gt;
Some reviewers didn't provide a date with their rating. Find the names of all reviewers who have ratings with a NULL value for the date. &lt;/p&gt;
&lt;p&gt;A4&lt;br&gt;
select name&lt;br&gt;
from Reviewer&lt;br&gt;
where rID in (select rID from Rating where ratingDate is null);  &lt;/p&gt;
&lt;p&gt;Q5&lt;br&gt;
Write a query to return the ratings data in a more readable format: reviewer name, movie title, stars, and ratingDate. Also, sort the data, first by reviewer name, then by movie title, and lastly by number of stars. &lt;/p&gt;
&lt;p&gt;A5&lt;br&gt;
select name, title, stars, ratingDate&lt;br&gt;
from Movie join Rating using(mID) join Reviewer using(rID)&lt;br&gt;
order by name, title, stars;  &lt;/p&gt;
&lt;p&gt;Q6&lt;br&gt;
For all cases where the same reviewer rated the same movie twice and gave it a higher rating the second time, return the reviewer's name and the title of the movie. &lt;/p&gt;
&lt;p&gt;A6&lt;br&gt;
select r.name, m.title&lt;br&gt;
from Reviewer as r, Movie as m,&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(select r1.rID, r1.mID&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;from Rating r1 , Rating r2&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;where r1.rID = r2.rID and r1.mID = r2.mID&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;and r1.stars &amp;gt; r2.stars&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;and r1.ratingDate &amp;gt; r2.ratingDate) as a&lt;br&gt;
where r.rID = a.rID and m.mID = a.mID&lt;/p&gt;
&lt;p&gt;Q7&lt;br&gt;
For each movie that has at least one rating, find the highest number of stars that movie received. Return the movie title and number of stars. Sort by movie title. &lt;/p&gt;
&lt;p&gt;A7&lt;br&gt;
select distinct r1.title,r1.stars&lt;br&gt;
from (Rating join Movie using(mID)) as r1 &lt;br&gt;
where not exists (select stars from Rating r2&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;where r1.stars&amp;lt;r2.stars and r1.mID = r2.mID)&lt;br&gt;
order by r1.title&lt;/p&gt;
&lt;p&gt;Q8&lt;br&gt;
For each movie, return the title and the 'rating spread', that is, the difference between highest and lowest ratings given to that movie. Sort by rating spread from highest to lowest, then by movie title. &lt;/p&gt;
&lt;p&gt;A8&lt;br&gt;
select title, rating_spread&lt;br&gt;
from Movie m join (select mID, max(stars)-min(stars) as rating_spread&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;from Rating r group by mID) using (mID)&lt;br&gt;
order by rating_spread desc, title&lt;/p&gt;
&lt;p&gt;Q9&lt;br&gt;
Find the difference between the average rating of movies released before 1980 and the average rating of movies released after 1980. (Make sure to calculate the average rating for each movie, then the average of those averages for movies before 1980 and movies after. Don't just calculate the overall average rating before and after 1980.) &lt;/p&gt;
&lt;p&gt;A9&lt;br&gt;
select avg(early.avgStar)-avg(late.avgStar)&lt;br&gt;
from (select avg(stars) as avgStar&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;from Movie join Rating using(mID)&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;group by mID&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;having year &amp;lt; 1980) as early,&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(select avg(stars) as avgStar&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;from Movie join Rating using(mID)&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;group by mID&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;having year &amp;gt; 1980) as late  &lt;/p&gt;
&lt;h2&gt;SQL Movie-Rating Query Exercises Extras (in SQLite)&lt;/h2&gt;
&lt;p&gt;Q1&lt;br&gt;
Find the names of all reviewers who rated Gone with the Wind. &lt;/p&gt;
&lt;p&gt;A1&lt;br&gt;
select name&lt;br&gt;
from (select distinct rID from Rating join Movie using(mID) &lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;where title = 'Gone with the Wind')&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;join Reviewer using(rID) &lt;/p&gt;
&lt;p&gt;Q2&lt;br&gt;
For any rating where the reviewer is the same as the director of the movie, return the reviewer name, movie title, and number of stars. &lt;/p&gt;
&lt;p&gt;A2
select name, title, stars&lt;br&gt;
from Rating join Reviewer using(rID) join Movie using (mID)&lt;br&gt;
where name = director  &lt;/p&gt;
&lt;p&gt;Q3&lt;br&gt;
Return all reviewer names and movie names together in a single list, alphabetized. (Sorting by the first name of the reviewer and first word in the title is fine; no need for special processing on last names or removing "The".) &lt;/p&gt;
&lt;p&gt;A3&lt;br&gt;
select name from Reviewer&lt;br&gt;
union &lt;br&gt;
select title from Movie  &lt;/p&gt;
&lt;p&gt;Q4&lt;br&gt;
Find the titles of all movies not reviewed by Chris Jackson. &lt;/p&gt;
&lt;p&gt;A4&lt;br&gt;
select title&lt;br&gt;
from Movie&lt;br&gt;
where mID not in (select mID from Reviewer join Rating using(rID) &lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;where name = 'Chris Jackson')&lt;/p&gt;
&lt;p&gt;Q5&lt;br&gt;
For all pairs of reviewers such that both reviewers gave a rating to the same movie, return the names of both reviewers. Eliminate duplicates, don't pair reviewers with themselves, and include each pair only once. For each pair, return the names in the pair in alphabetical order. &lt;/p&gt;
&lt;p&gt;A5&lt;br&gt;
select distinct r1.name,r2.name&lt;br&gt;
from (Rating join Reviewer using(rID)) as r1, (Rating join Reviewer using(rID)) as r2&lt;br&gt;
where r1.name &amp;lt; r2.name and r1.mID = r2.mID  &lt;/p&gt;
&lt;p&gt;Q6&lt;br&gt;
For each rating that is the lowest (fewest stars) currently in the database, return the reviewer name, movie title, and number of stars. &lt;/p&gt;
&lt;p&gt;A6&lt;br&gt;
select name, title, stars&lt;br&gt;
from (Reviewer join Rating using(rID) join Movie using(mID)) as r1&lt;br&gt;
where not exists (select stars from Rating r2 where r1.stars &amp;gt; r2.stars)  &lt;/p&gt;
&lt;p&gt;Q7&lt;br&gt;
List movie titles and average ratings, from highest-rated to lowest-rated. If two or more movies have the same average rating, list them in alphabetical order. &lt;/p&gt;
&lt;p&gt;A7&lt;br&gt;
select title, avg(stars) as avgStars&lt;br&gt;
from Rating join Movie using(mID)&lt;br&gt;
group by mID&lt;br&gt;
order by avgStars desc, title  &lt;/p&gt;
&lt;p&gt;Q8&lt;br&gt;
Find the names of all reviewers who have contributed three or more ratings. (As an extra challenge, try writing the query without HAVING or without COUNT.) &lt;/p&gt;
&lt;p&gt;A8&lt;br&gt;
select name&lt;br&gt;
from Reviewer&lt;br&gt;
where rID in (select rID from Rating group by rID having count(stars)&amp;gt;2);  &lt;/p&gt;
&lt;p&gt;Q9&lt;br&gt;
Some directors directed more than one movie. For all such directors, return the titles of all movies directed by them, along with the director name. Sort by director name, then movie title. &lt;/p&gt;
&lt;p&gt;A9&lt;br&gt;
select title,director&lt;br&gt;
from Movie&lt;br&gt;
where director in (select director from Movie group by director&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;having count(director)&amp;gt;1)&lt;br&gt;
order by director,title&lt;/p&gt;
&lt;p&gt;(As an extra challenge, try writing the query both with and without COUNT.) &lt;/p&gt;
&lt;p&gt;select distinct m1.title,m1.director&lt;br&gt;
from Movie m1, Movie m2&lt;br&gt;
where m1.director = m2.director and m1.title &amp;lt;&amp;gt; m2.title&lt;br&gt;
order by m1.director,m1.title&lt;/p&gt;
&lt;p&gt;Q10&lt;br&gt;
Find the movie(s) with the highest average rating. Return the movie title(s) and average rating. (Hint: This query is more difficult to write in SQLite than other systems; you might think of it as finding the highest average rating and then choosing the movie(s) with that average rating.) &lt;/p&gt;
&lt;p&gt;A10&lt;br&gt;
select M.title, M.avgStars&lt;br&gt;
from (select title, avg(stars) as avgStars from Movie join Rating using(mID) &lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;group by mID) as M&lt;br&gt;
where M.avgStars = (select max(avgStars) &lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;from (select avg(stars) as avgStars from Rating &lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;group by mID))&lt;/p&gt;
&lt;p&gt;Q11&lt;br&gt;
Find the movie(s) with the lowest average rating. Return the movie title(s) and average rating. (Hint: This query may be more difficult to write in SQLite than other systems; you might think of it as finding the lowest average rating and then choosing the movie(s) with that average rating.) &lt;/p&gt;
&lt;p&gt;A11&lt;br&gt;
select M.title, M.avgStars&lt;br&gt;
from (select title, avg(stars) as avgStars from Movie join Rating using(mID) &lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;group by mID) as M&lt;br&gt;
where M.avgStars = (select min(avgStars) &lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;from (select avg(stars) as avgStars from Rating &lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;group by mID))  &lt;/p&gt;
&lt;p&gt;Q12&lt;br&gt;
For each director, return the director's name together with the title(s) of the movie(s) they directed that received the highest rating among all of their movies, and the value of that rating. Ignore movies whose director is NULL.&lt;/p&gt;
&lt;p&gt;A12&lt;br&gt;
select distinct m1.director, m1.title, m1.stars&lt;br&gt;
from (Movie join Rating using(mID)) as m1&lt;br&gt;
where m1.director is not null and &lt;br&gt;
not exists (select stars from (Movie join Rating using(mID)) as m2&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;where m1.stars&amp;lt;m2.stars and m1.director = m2.director)&lt;/p&gt;
&lt;h2&gt;SQL Movie-Rating Modification Exercises (in SQLite)&lt;/h2&gt;
&lt;p&gt;Q1&lt;br&gt;
Add the reviewer Roger Ebert to your database, with an rID of 209. &lt;/p&gt;
&lt;p&gt;A1&lt;br&gt;
insert into Reviewer values (209,'Roger Ebert');&lt;/p&gt;
&lt;p&gt;Q2&lt;br&gt;
Insert 5-star ratings by James Cameron for all movies in the database. Leave the review date as NULL. &lt;/p&gt;
&lt;p&gt;A2&lt;br&gt;
insert into Rating&lt;br&gt;
select rID, mID, 5, null&lt;br&gt;
from (select rID from Reviewer &lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;where name = 'James Cameron') as JC, Movie&lt;/p&gt;
&lt;p&gt;Q3&lt;br&gt;
For all movies that have an average rating of 4 stars or higher, add 25 to the release year. (Update the existing tuples; don't insert new tuples.) &lt;/p&gt;
&lt;p&gt;A3&lt;br&gt;
update Movie&lt;br&gt;
set year = year+25&lt;br&gt;
where mID in (select mID&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;from (select mID, avg(stars) as avgStars&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;from Rating group by mID)&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;where avgStars&amp;gt;=4)&lt;/p&gt;
&lt;p&gt;Q4&lt;br&gt;
Remove all ratings where the movie's year is before 1970 or after 2000, and the rating is fewer than 4 stars.&lt;/p&gt;
&lt;p&gt;A4&lt;br&gt;
delete from Rating&lt;br&gt;
where mID in (select mID from Movie where year&amp;lt;1970 or year&amp;gt;2000)&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;and stars&amp;lt;4&lt;/p&gt;</content></entry></feed>