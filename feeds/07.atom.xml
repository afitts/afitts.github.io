<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Alex Fitts</title><link href="http://localhost:8000/" rel="alternate"></link><link href="http://localhost:8000/feeds/07.atom.xml" rel="self"></link><id>http://localhost:8000/</id><updated>2014-07-27T00:00:00-05:00</updated><entry><title>Scraping Craigslist for sold out concert tickets</title><link href="http://localhost:8000/2014/07/27/scraping-craigslist-for-tickets/" rel="alternate"></link><published>2014-07-27T00:00:00-05:00</published><author><name>Alex Fitts</name></author><id>tag:localhost:8000,2014-07-27:2014/07/27/scraping-craigslist-for-tickets/</id><summary type="html">&lt;p&gt;Recently, I've been listening to a lot of lo-fi rock band, &lt;a href="http://en.wikipedia.org/wiki/Cloud_Nothings"&gt;Cloud Nothings&lt;/a&gt;. Their album, &lt;a href="http://www.amazon.com/gp/product/B00HZJH97Q/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=B00HZJH97Q&amp;amp;linkCode=as2&amp;amp;tag=gjreda-20&amp;amp;linkId=H7HYP35ZYKFAKH7H"&gt;Here &amp;amp; Nowhere Else&lt;/a&gt;, has been &lt;a href="http://www.metacritic.com/music/here-and-nowhere-else/cloud-nothings"&gt;critically lauded&lt;/a&gt;, including &lt;a href="http://pitchfork.com/reviews/albums/19075-cloud-nothings-here-and-nowhere-else/"&gt;garnering "Best New Music" from Pitchfork&lt;/a&gt;. As a result, when they came to Chicago's tiny Lincoln Hall in May, tickets sold out in a hurry - well before I found out about the show. Desperately wanting to go, I started checking Craigslist every day or two for tickets.&lt;/p&gt;
&lt;p&gt;Lincoln Hall only holds about 500 people, so Craigslist postings were few and far between. When a post did pop up, I always ended up seeing it a couple hours after it was posted and was too late - the tickets had been sold. Noticing that my frustration was beginning to grow, I figured it was time to automate my Craigslist searches for tickets.&lt;/p&gt;
&lt;p&gt;If you search on Craigslist and look at the URL of the results page, you'll notice that it looks very similar to this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Craigslist Search Results URL" src="/images/craigslist-search-results-url.png" /&gt;&lt;/p&gt;
&lt;p&gt;Note the section that says &lt;code&gt;query=this+is+my+search+term&lt;/code&gt; - that's where your search term gets passed to the databases that back Craigslist (with spaces replaced by + signs). This means we can write code to automate any "for sale" search by hitting &lt;code&gt;http://&amp;lt;city&amp;gt;.craigslist.org/search/sss?query=&amp;lt;term&amp;gt;&lt;/code&gt; where &lt;code&gt;&amp;lt;city&amp;gt;&lt;/code&gt; corresponds to the subdomain of your city's respective Craigslist and &lt;code&gt;&amp;lt;term&amp;gt;&lt;/code&gt; is our search term.&lt;/p&gt;
&lt;p&gt;For my use case, there were very few Craigslist results for each search of "Cloud Nothings" and none of them were spammy. I decided to write a script which would run every 10 minutes and send me a text message if any of the results were new. If I got a text, I could quickly head over to Craigslist, email the seller, and go back about my day. I was lucky that ticket brokers hadn't started putting "Cloud Nothings" in their spammy posts - if they had, this solution likely would not have worked - the text messages would have been more noise than signal.&lt;/p&gt;
&lt;p&gt;Thankfully, it worked. I was able to get a ticket for face value two nights before the show.&lt;/p&gt;
&lt;p&gt;In the sections below, I'll walk through the code behind it all. If you're unfamiliar with web scraping, I suggest reading my previous posts &lt;a href="http://www.gregreda.com/2013/03/03/web-scraping-101-with-python/"&gt;here&lt;/a&gt; and &lt;a href="http://www.gregreda.com/2013/05/06/more-web-scraping-with-python/"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Code Walk-Through&lt;/h3&gt;
&lt;p&gt;Most of the code's functionality is contained within the four functions below.&lt;/p&gt;
&lt;h4&gt;parse_results&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse_results&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;search_term&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="n"&gt;search_term&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;search_term&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;+&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;search_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BASE_URL&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;search_term&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;soup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;urlopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;search_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="n"&gt;rows&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;div&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;content&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;p&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;row&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://chicago.craigslist.org&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;href&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;create_date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;span&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_text&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_text&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;url&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;create_date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;create_date&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The above function takes a &lt;code&gt;search_term&lt;/code&gt;, which is used to execute a search on Craigslist. It returns a list of dictionaries, where each dictionary represents a post found within the search results.&lt;/p&gt;
&lt;p&gt;Note the global &lt;code&gt;BASE_URL&lt;/code&gt; variable - this is the search results URL mentioned earlier. Here, we're injecting our search term into the section of the URL that had &lt;code&gt;query=&amp;lt;term&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The majority of this function utilizes &lt;a href="http://www.crummy.com/software/BeautifulSoup/"&gt;BeautifulSoup&lt;/a&gt; to parse the HTML of Craigslist's search results page. For each post in the search results, we store the URL of the post, its creation date, and its title.&lt;/p&gt;
&lt;p&gt;In the next function, we'll write these results to a CSV file, which we'll later use to check whether or not there are "new" posts.&lt;/p&gt;
&lt;h4&gt;write_results&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;write_results&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Writes list of dictionaries to file.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;fields&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;results.csv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;dw&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DictWriter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fieldnames&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;fields&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;delimiter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;|&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;dw&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;writerow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dw&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fieldnames&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;dw&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;writerows&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As mentioned above, &lt;code&gt;write_results&lt;/code&gt; takes a list of dictionaries and writes them to a CSV file called &lt;code&gt;results.csv&lt;/code&gt;. Each line of the file will store a post's title, create date, and URL.&lt;/p&gt;
&lt;p&gt;You can think of this file similarly to how you might think of a database - we're storing information that we'll need to refer to later on. Since we aren't storing much data, there's really no need to use something like SQLite, MySQL or any other datastore - a text file works just fine for our use case. I'm a big proponent of &lt;a href="http://en.wikipedia.org/wiki/KISS_principle"&gt;KISS methodology&lt;/a&gt; (Keep It Simple, Stupid).&lt;/p&gt;
&lt;h4&gt;has_new_records&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;has_new_records&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;current_posts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;url&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;fields&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;results.csv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;results.csv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;reader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DictReader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fieldnames&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;fields&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;delimiter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;|&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;seen_posts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;url&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="n"&gt;is_new&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;current_posts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;seen_posts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;pass&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;is_new&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;is_new&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This function determines whether or not any of the posts are new (not present in the results from the last time our code was run).&lt;/p&gt;
&lt;p&gt;It takes a list of dictionaries (exactly the same as the one &lt;code&gt;parse_results&lt;/code&gt; returns) and checks it against the CSV file we created with the &lt;code&gt;write_results&lt;/code&gt; function. Since a URL can only point to one post, we can consider it a &lt;a href="http://en.wikipedia.org/wiki/Unique_key"&gt;unique key&lt;/a&gt; to check against.&lt;/p&gt;
&lt;p&gt;If any of the URLs in results are not found within the CSV file, this function will return &lt;code&gt;True&lt;/code&gt;, which we'll use as a trigger to sending off a text message as notification.&lt;/p&gt;
&lt;h4&gt;send_text&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;send_text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;phone_number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;fromaddr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Craigslist Checker&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;toaddrs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;phone_number&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;@txt.att.net&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;From: {0}&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s2"&gt;To: {1}&lt;/span&gt;&lt;span class="se"&gt;\r\n\r\n&lt;/span&gt;&lt;span class="s2"&gt;{2}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fromaddr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;toaddrs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;smtplib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SMTP&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;smtp.gmail.com:587&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;starttls&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;username&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;password&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sendmail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fromaddr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;toaddrs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;quit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;send_text&lt;/code&gt; requires two parameters - the first being the 10-digit phone number that will receive the SMS message, and the second being the content of the message.&lt;/p&gt;
&lt;p&gt;This function makes use of the &lt;a href="http://en.wikipedia.org/wiki/Simple_Mail_Transfer_Protocol"&gt;Simple Mail Transfer Protocol&lt;/a&gt; (or SMTP) as well as AT&amp;amp;T's email-to-SMS gateway (notice the &lt;code&gt;@txt.att.net&lt;/code&gt;). This allows us to use a GMail account to send the text message.&lt;/p&gt;
&lt;p&gt;Note that if you are not a GMail user or do not use AT&amp;amp;T for your cell phone service, you'll need to make some changes to this function. You can find a list of other email-to-SMS gateways &lt;a href="http://www.emailtextmessages.com/"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Since this function uses my GMail credentials, I've stored them in a separate Python file which I am referencing when I call &lt;code&gt;config.email['username']&lt;/code&gt; and &lt;code&gt;config.email['password']&lt;/code&gt;. You can find the config setup &lt;a href="https://github.com/gjreda/craigslist-checker/blob/master/config.py"&gt;here&lt;/a&gt;. Just make sure you don't accidentally check in your GMail credentials if you're putting this on GitHub.&lt;/p&gt;
&lt;h4&gt;Putting it all together&lt;/h4&gt;
&lt;p&gt;You can take a look at the final script &lt;a href="https://github.com/gjreda/craigslist-checker/blob/master/craigslist.py"&gt;here&lt;/a&gt;. Feel free to use it however you'd like. Deploying it is as simple as spinning up a micro EC2 instance and setting up a cronjob to run the script as often as you'd like.&lt;/p&gt;
&lt;p&gt;Did you like this post? Was there something I missed? &lt;a href="https://twitter.com/gjreda"&gt;Let me know on Twitter&lt;/a&gt;.&lt;/p&gt;</summary><category term="scraping"></category><category term="tutorial"></category><category term="python"></category><category term="data"></category></entry><entry><title>Useful Unix commands for data science</title><link href="http://localhost:8000/2013/07/15/unix-commands-for-data-science/" rel="alternate"></link><published>2013-07-15T00:00:00-05:00</published><author><name>Alex Fitts</name></author><id>tag:localhost:8000,2013-07-15:2013/07/15/unix-commands-for-data-science/</id><summary type="html">&lt;p&gt;Imagine you have a 4.2GB CSV file.  It has over 12 million records and 50 columns.  All you need from this file is the sum of all values in one particular column.&lt;/p&gt;
&lt;p&gt;How would you do it?&lt;/p&gt;
&lt;p&gt;Writing a script in &lt;a href="http://www.python.org/"&gt;python&lt;/a&gt;/&lt;a href="http://www.ruby-lang.org/"&gt;ruby&lt;/a&gt;/&lt;a href="http://www.perl.org/"&gt;perl&lt;/a&gt;/whatever would probably take a few minutes and then even more time for the script to actually complete.  A &lt;a href="http://en.wikipedia.org/wiki/Database"&gt;database&lt;/a&gt; and &lt;a href="http://en.wikipedia.org/wiki/SQL"&gt;SQL&lt;/a&gt; would be fairly quick, but then you'd have load the data, which is kind of a pain.&lt;/p&gt;
&lt;p&gt;Thankfully, the &lt;a href="http://en.wikipedia.org/wiki/List_of_Unix_utilities"&gt;Unix utilities&lt;/a&gt; exist and they're awesome.&lt;/p&gt;
&lt;p&gt;To get the sum of a column in a huge text file, we can easily use &lt;a href="http://en.wikipedia.org/wiki/AWK_(programming_language)"&gt;awk&lt;/a&gt;.  And we won't even need to read the entire file into memory.&lt;/p&gt;
&lt;p&gt;Let's assume our data, which we'll call &lt;em&gt;data.csv&lt;/em&gt;, is pipe-delimited ( | ), and we want to sum the fourth column of the file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;cat&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;csv&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;awk&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;F&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;|&amp;quot;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{ sum += $4 } END { printf &amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%.2f&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;quot;, sum }&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The above line says:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Use the &lt;a href="http://en.wikipedia.org/wiki/Cat_(Unix)"&gt;cat&lt;/a&gt; command to stream (print) the contents of the file to &lt;a href="http://en.wikipedia.org/wiki/Standard_streams"&gt;stdout&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Pipeline_(Unix)"&gt;Pipe&lt;/a&gt; the streaming contents from our cat command to the next one - awk. &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;With &lt;a href="http://en.wikipedia.org/wiki/AWK_(programming_language)"&gt;awk&lt;/a&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Set the field separator to the pipe character (-F "|"). Note that this has nothing to do with our pipeline in point #2.&lt;/li&gt;
&lt;li&gt;Increment the variable &lt;em&gt;sum&lt;/em&gt; with the value in the fourth column ($4). Since we used a pipeline in point #2, the contents of each line are being streamed to this statement.&lt;/li&gt;
&lt;li&gt;Once the stream is done, print out the value of &lt;em&gt;sum&lt;/em&gt;, using &lt;a href="http://www.gnu.org/software/gawk/manual/html_node/Printf-Examples.html"&gt;printf&lt;/a&gt; to format the value with two decimal places.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It took less than two minutes to run on the entire file - much faster than other options and written in a lot fewer characters.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.hilarymason.com"&gt;Hilary Mason&lt;/a&gt; and &lt;a href="http://www.columbia.edu/~chw2/"&gt;Chris Wiggins&lt;/a&gt; wrote over at the &lt;a href="http://www.dataists.com/"&gt;dataists blog&lt;/a&gt; about the importance of any &lt;a href="http://www.dataists.com/2010/09/a-taxonomy-of-data-science/"&gt;data scientist being familiar with the command line&lt;/a&gt;, and I couldn't agree with them more.  The command line is essential to my daily work, so I wanted to share some of the commands I've found most useful.&lt;/p&gt;
&lt;p&gt;For those who are a bit newer to the command line than the rest of this post assumes, Hilary previously wrote a &lt;a href="http://www.hilarymason.com/articles/intro-to-the-linux-command-line/"&gt;nice introduction to it&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Other commands&lt;/h3&gt;
&lt;h4&gt;&lt;a href="http://en.wikipedia.org/wiki/Head_(Unix)"&gt;head&lt;/a&gt; &amp;amp; &lt;a href="http://en.wikipedia.org/wiki/Tail_(Unix)"&gt;tail&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Sometimes you just need to inspect the structure of a huge file.  That's where &lt;a href="http://en.wikipedia.org/wiki/Head_(Unix)"&gt;head&lt;/a&gt; and &lt;a href="http://en.wikipedia.org/wiki/Tail_(Unix)"&gt;tail&lt;/a&gt; come in.  Head prints the first ten lines of a file, while tail prints the last ten lines.  Optionally, you can include the &lt;em&gt;-N&lt;/em&gt; parameter to change the number of lines displayed.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;csv&lt;/span&gt;
&lt;span class="c1"&gt;# time|away|score|home&lt;/span&gt;
&lt;span class="c1"&gt;# 20:00||0-0|Jump Ball won by Virginia Commonwealt.&lt;/span&gt;
&lt;span class="c1"&gt;# 19:45||0-0|Juvonte Reddic Turnover.&lt;/span&gt;

&lt;span class="n"&gt;tail&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;csv&lt;/span&gt;
&lt;span class="c1"&gt;# 0:14|Trey Davis Turnover.|62-71|&lt;/span&gt;
&lt;span class="c1"&gt;# 0:14||62-71|Briante Weber Steal.&lt;/span&gt;
&lt;span class="c1"&gt;# 0:00|End Game|End Game|End Game&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;&lt;a href="http://en.wikipedia.org/wiki/Wc_(Unix)"&gt;wc&lt;/a&gt; (word count)&lt;/h4&gt;
&lt;p&gt;By default, &lt;a href="http://en.wikipedia.org/wiki/Wc_(Unix)"&gt;wc&lt;/a&gt; will quickly tell you how many lines, words, and bytes are in a file.  If you're looking for just the line count, you can pass the &lt;em&gt;-l&lt;/em&gt; parameter in.&lt;/p&gt;
&lt;p&gt;I use it most often to verify record counts between files or database tables throughout an analysis.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;wc&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;csv&lt;/span&gt;
&lt;span class="c1"&gt;#     377    1697   17129 data.csv&lt;/span&gt;
&lt;span class="n"&gt;wc&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;csv&lt;/span&gt;
&lt;span class="c1"&gt;#     377 data.csv&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;&lt;a href="http://en.wikipedia.org/wiki/Grep"&gt;grep&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Grep"&gt;Grep&lt;/a&gt; allows you to search through plain text files using &lt;a href="http://en.wikipedia.org/wiki/Regular_expression"&gt;regular expressions&lt;/a&gt;.  I tend &lt;a href="http://regex.info/blog/2006-09-15/247"&gt;avoid regular expressions&lt;/a&gt; when possible, but still find grep to be invaluable when searching through log files for a particular event.&lt;/p&gt;
&lt;p&gt;There's an assortment of extra parameters you can use with grep, but the ones I tend to use the most are &lt;em&gt;-i&lt;/em&gt; (ignore case), &lt;em&gt;-r&lt;/em&gt; (recursively search directories), &lt;em&gt;-B N&lt;/em&gt; (N lines before), &lt;em&gt;-A N&lt;/em&gt; (N lines after).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;grep&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;steal&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;csv&lt;/span&gt;
&lt;span class="c1"&gt;# 17:25||2-4|Darius Theus Turnover.&lt;/span&gt;
&lt;span class="c1"&gt;# 17:25|Terrell Vinson Steal.|2-4|&lt;/span&gt;
&lt;span class="c1"&gt;# 17:18|Chaz Williams made Layup.  Assisted by Terrell Vinson.|4-4|&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;&lt;a href="http://en.wikipedia.org/wiki/Sed"&gt;sed&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Sed"&gt;Sed&lt;/a&gt; is similar to &lt;a href="http://en.wikipedia.org/wiki/Grep"&gt;grep&lt;/a&gt; and &lt;a href="http://en.wikipedia.org/wiki/AWK_(programming_language)"&gt;awk&lt;/a&gt; in many ways, however I find that I most often use it when needing to do some find and replace magic on a very large file.  The usual occurrence is when I've received a CSV file that was generated on Windows and my &lt;a href="http://stackoverflow.com/questions/6373888/converting-newline-formatting-from-mac-to-windows"&gt;Mac isn't able to handle the carriage return&lt;/a&gt; properly.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;grep&lt;/span&gt; &lt;span class="n"&gt;Block&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;csv&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="c1"&gt;# 16:43||5-4|Juvonte Reddic Block.&lt;/span&gt;
&lt;span class="c1"&gt;# 15:37||7-6|Troy Daniels Block.&lt;/span&gt;
&lt;span class="c1"&gt;# 14:05|Raphiael Putney Block.|11-8|&lt;/span&gt;

&lt;span class="n"&gt;sed&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;s/Block/Rejection/g&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;csv&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;rejection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;csv&lt;/span&gt;
&lt;span class="c1"&gt;# replace all instances of the word &amp;#39;Block&amp;#39; in data.csv with &amp;#39;Rejection&amp;#39;&lt;/span&gt;
&lt;span class="c1"&gt;# stream the results to a new file called rejection.csv&lt;/span&gt;

&lt;span class="n"&gt;grep&lt;/span&gt; &lt;span class="n"&gt;Rejection&lt;/span&gt; &lt;span class="n"&gt;rejection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;csv&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="c1"&gt;# 16:43||5-4|Juvonte Reddic Rejection.&lt;/span&gt;
&lt;span class="c1"&gt;# 15:37||7-6|Troy Daniels Rejection.&lt;/span&gt;
&lt;span class="c1"&gt;# 14:05|Raphiael Putney Rejection.|11-8|&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;&lt;a href="http://en.wikipedia.org/wiki/Sort_(Unix)"&gt;sort&lt;/a&gt; &amp;amp; &lt;a href="http://en.wikipedia.org/wiki/Uniq"&gt;uniq&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Sort_(Unix)"&gt;Sort&lt;/a&gt; outputs the lines of a file in order based on a column key using the &lt;em&gt;-k&lt;/em&gt; parameter.  If a key isn't specified, sort will treat each line as a concatenated string and sort based on the values of the first column.  The &lt;em&gt;-n&lt;/em&gt; and &lt;em&gt;-r&lt;/em&gt; parameters allow you to sort numerically and in reverse order, respectively.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;csv&lt;/span&gt;
&lt;span class="c1"&gt;# time|away|score|home&lt;/span&gt;
&lt;span class="c1"&gt;# 20:00||0-0|Jump Ball won by Virginia Commonwealt.&lt;/span&gt;
&lt;span class="c1"&gt;# 19:45||0-0|Juvonte Reddic Turnover.&lt;/span&gt;
&lt;span class="c1"&gt;# 19:45|Chaz Williams Steal.|0-0|&lt;/span&gt;
&lt;span class="c1"&gt;# 19:39|Sampson Carter missed Layup.|0-0|&lt;/span&gt;

&lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;csv&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;sort&lt;/span&gt;
&lt;span class="c1"&gt;# 19:39|Sampson Carter missed Layup.|0-0|&lt;/span&gt;
&lt;span class="c1"&gt;# 19:45|Chaz Williams Steal.|0-0|&lt;/span&gt;
&lt;span class="c1"&gt;# 19:45||0-0|Juvonte Reddic Turnover.&lt;/span&gt;
&lt;span class="c1"&gt;# 20:00||0-0|Jump Ball won by Virginia Commonwealt.&lt;/span&gt;
&lt;span class="c1"&gt;# time|away|score|home&lt;/span&gt;

&lt;span class="c1"&gt;# columns separated by &amp;#39;|&amp;#39;, sort on column 2 (-k2), case insensitive (-f)&lt;/span&gt;
&lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;csv&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;sort&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;|&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;k2&lt;/span&gt;
&lt;span class="c1"&gt;# time|away|score|home&lt;/span&gt;
&lt;span class="c1"&gt;# 19:45|Chaz Williams Steal.|0-0|&lt;/span&gt;
&lt;span class="c1"&gt;# 19:39|Sampson Carter missed Layup.|0-0|&lt;/span&gt;
&lt;span class="c1"&gt;# 20:00||0-0|Jump Ball won by Virginia Commonwealt.&lt;/span&gt;
&lt;span class="c1"&gt;# 19:45||0-0|Juvonte Reddic Turnover.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Sometimes you want to check for duplicate records in a large text file - that's when &lt;a href="http://en.wikipedia.org/wiki/Uniq"&gt;uniq&lt;/a&gt; comes in handy.  By using the &lt;em&gt;-c&lt;/em&gt; parameter, uniq will output the count of occurrences along with the line.  You can also use the &lt;em&gt;-d&lt;/em&gt; and &lt;em&gt;-u&lt;/em&gt; parameters to output only duplicated or unique records.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;csv&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;uniq&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;sort&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;nr&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;
&lt;span class="c1"&gt;#   2 8:47|Maxie Esho missed Layup.|46-54|&lt;/span&gt;
&lt;span class="c1"&gt;#   2 8:47|Maxie Esho Offensive Rebound.|46-54|&lt;/span&gt;
&lt;span class="c1"&gt;#   2 7:38|Trey Davis missed Free Throw.|51-56|&lt;/span&gt;
&lt;span class="c1"&gt;#   2 12:12||16-11|Rob Brandenberg missed Free Throw.&lt;/span&gt;
&lt;span class="c1"&gt;#   1 time|away|score|home&lt;/span&gt;
&lt;span class="c1"&gt;#   1 9:51||20-11|Juvonte Reddic Steal.&lt;/span&gt;

&lt;span class="n"&gt;sort&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;csv&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;uniq&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;
&lt;span class="c1"&gt;# 12:12||16-11|Rob Brandenberg missed Free Throw.&lt;/span&gt;
&lt;span class="c1"&gt;# 7:38|Trey Davis missed Free Throw.|51-56|&lt;/span&gt;
&lt;span class="c1"&gt;# 8:47|Maxie Esho Offensive Rebound.|46-54|&lt;/span&gt;
&lt;span class="c1"&gt;# 8:47|Maxie Esho missed Layup.|46-54|&lt;/span&gt;

&lt;span class="n"&gt;sort&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;csv&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;uniq&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;wc&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;
&lt;span class="c1"&gt;#     369 (unique lines)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;While it's sometimes difficult to remember all of the parameters for the Unix commands, getting familiar with them has been beneficial to my productivity and allowed me to avoid many headaches when working with large text files.&lt;/p&gt;
&lt;p&gt;Hopefully you'll find them as useful as I have.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Additional Resources:&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.drbunsen.org/explorations-in-unix/"&gt;Explorations in Unix&lt;/a&gt; by &lt;a href="http://www.drbunsen.org/"&gt;Seth Brown&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.ceri.memphis.edu/computer/docs/unix/bshell.htm"&gt;An Introduction to the Unix Shell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.comsysto.com/2013/04/25/data-analysis-with-the-unix-shell/"&gt;Data Analysis with the Unix Shell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://jeroenjanssens.com/2013/09/19/seven-command-line-tools-for-data-science.html"&gt;7 Command Line Tools for Data Science&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="unix"></category><category term="terminal"></category><category term="data"></category><category term="data science"></category></entry></feed>